javascript: (function(){ 'use strict'; var GATEWAY_HOST = "workspace.melodydashora.repl.co"; var PATH_PREFIXES = ["/assistant", "/api/assistant", "/agent", "/api/agent"]; var VERIFY = "/api/assistant/verify-override"; var ENABLED = !/[?&]no-override=1(?:&|$)/.test(location.search); var STRICT = true; if (!ENABLED) { console.warn("[eidolon] disabled via ?no-override=1"); return; } var ORIG = { fetch: window.fetch ? window.fetch.bind(window) : null, XHR_open: XMLHttpRequest && XMLHttpRequest.prototype.open, XHR_send: XMLHttpRequest && XMLHttpRequest.prototype.send, EventSource: window.EventSource || null, WebSocket: window.WebSocket || null }; function isAssistantPath(pathname){ try { return PATH_PREFIXES.some(function(p){ return pathname.indexOf(p) === 0; }); } catch(e){ return false; } } function tryRewriteURL(input, forWS){ if (forWS !== true) forWS = false; try { var u = new URL(input, location.href); if (!isAssistantPath(u.pathname)) return null; if (u.host === GATEWAY_HOST) return null; u.host = GATEWAY_HOST; u.protocol = forWS ? "wss:" : "https:"; return u.toString(); } catch(e){ return null; } } function logEvent(kind, detail){ try { console.log("[eidolon]", kind, detail); window.__EIDOLON_LAST_EVENT = { kind: kind, detail: detail, ts: Date.now() }; } catch(e){} } function printUserMessages(messages, meta){ try { if (!messages || !messages.length) return; for (var i=0; i<messages.length; i++){ var m = messages[i]; if (!m) continue; var text = ""; if (typeof m === "string") text = m; else if (m.text) text = m.text; else if (m.content && typeof m.content === "string") text = m.content; else if (Array.isArray(m.content)) { for (var j=0;j<m.content.length;j++){ var p = m.content[j]; if (p && typeof p.text === "string") { text += (text ? " " : "") + p.text; } else if (p && typeof p === "string") { text += (text ? " " : "") + p; } } } var printable = (text || "").slice(0, 12000); console.log("[user→assistant]", printable, meta || ""); } } catch(e){ console.warn("[eidolon] printUserMessages error", e); } } function verifyOverride(){ try { var url = "https://" + GATEWAY_HOST + VERIFY + "?t=" + Date.now(); var img = new Image(), done = false; var timeout = setTimeout(function(){ if (done) return; done = true; window.__EIDOLON_OVERRIDE_VERIFIED = false; logEvent("verify_timeout", { url: url }); }, 1500); img.onload = img.onerror = function(){ if (done) return; done = true; clearTimeout(timeout); window.__EIDOLON_OVERRIDE_VERIFIED = true; logEvent("verify_ok", { url: url }); }; img.src = url; } catch(e){ window.__EIDOLON_OVERRIDE_VERIFIED = null; logEvent("verify_error", { error: String(e) }); } } window.eidolonStatus = function(){ return { host: GATEWAY_HOST, paths: PATH_PREFIXES, verified: !!window.__EIDOLON_OVERRIDE_VERIFIED, last: window.__EIDOLON_LAST_EVENT || null }; }; if (ORIG.fetch){ window.fetch = function(input, init){ try { var url = typeof input === "string" ? input : (input && input.url); var rewritten = url && tryRewriteURL(url, false); var method = (init && init.method) || (input && input.method) || "GET"; if (!rewritten) return ORIG.fetch(input, init); var baseHeaders = (init && init.headers) || (input && input.headers) || void 0; var headers = new Headers(baseHeaders || void 0); try { headers.set("X-Assistant-Override", "1"); } catch(headerErr){} var opts = Object.assign({}, init || {}); opts.headers = headers; if (opts.credentials){ delete opts.credentials; } var body = opts.body; if (body && typeof body === "string"){ try { var parsed = JSON.parse(body); if (parsed && Array.isArray(parsed.messages)){ printUserMessages(parsed.messages, { method: method, url: rewritten }); } } catch(parseErr){} } logEvent("fetch", { method: method, originalUrl: url, overrideUrl: rewritten }); return ORIG.fetch(rewritten, opts); } catch(err){ logEvent("fetch_error", { error: String(err), url: url }); return ORIG.fetch(input, init); } }; } if (ORIG.XHR_open){ XMLHttpRequest.prototype.open = function(method, url, async, user, password){ try { var rewritten = tryRewriteURL(url, false); if (rewritten){ logEvent("xhr_open", { method: method, originalUrl: url, overrideUrl: rewritten }); return ORIG.XHR_open.call(this, method, rewritten, async, user, password); } } catch(e){ logEvent("xhr_open_error", { error: String(e), url: url }); } return ORIG.XHR_open.call(this, method, url, async, user, password); }; } if (ORIG.XHR_send){ XMLHttpRequest.prototype.send = function(body){ try { this.setRequestHeader("X-Assistant-Override", "1"); } catch(e){} if (body && typeof body === "string"){ try { var parsed = JSON.parse(body); if (parsed && Array.isArray(parsed.messages)){ printUserMessages(parsed.messages, { method: "XHR" }); } } catch(parseErr){} } return ORIG.XHR_send.call(this, body); }; } if (ORIG.EventSource){ window.EventSource = function(url, config){ var rewritten = tryRewriteURL(url, false); if (rewritten){ logEvent("eventsource", { originalUrl: url, overrideUrl: rewritten }); return new ORIG.EventSource(rewritten, config); } return new ORIG.EventSource(url, config); }; } if (ORIG.WebSocket){ window.WebSocket = function(url, protocols){ var rewritten = tryRewriteURL(url, true); if (rewritten){ logEvent("websocket", { originalUrl: url, overrideUrl: rewritten }); return new ORIG.WebSocket(rewritten, protocols); } return new ORIG.WebSocket(url, protocols); }; } verifyOverride(); logEvent("init", { host: GATEWAY_HOST, paths: PATH_PREFIXES, strict: STRICT }); alert("✅ Eidolon Override Active!\n\nHost: " + GATEWAY_HOST + "\n\nPaths intercepted:\n" + PATH_PREFIXES.join("\n") + "\n\nCheck console for details."); })();
