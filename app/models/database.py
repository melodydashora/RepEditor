"""
SQLAlchemy Database Models for Vecto Pilot
Converted from Drizzle ORM schema (shared/schema.js)
"""
from datetime import datetime
from typing import Optional, Dict, Any, List
from uuid import uuid4
from sqlalchemy import (
    Column, String, Integer, Float, Boolean, DateTime,
    ForeignKey, Text, JSON, UniqueConstraint, Index, CheckConstraint
)
from sqlalchemy.dialects.postgresql import UUID, ARRAY
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func

Base = declarative_base()


class Snapshot(Base):
    """Context snapshots - GPS location with weather, time, and environmental data"""
    __tablename__ = "snapshots"
    
    snapshot_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    user_id = Column(UUID(as_uuid=True))
    device_id = Column(UUID(as_uuid=True), nullable=False)
    session_id = Column(UUID(as_uuid=True), nullable=False)
    
    # GPS coordinates
    lat = Column(Float, nullable=False)
    lng = Column(Float, nullable=False)
    accuracy_m = Column(Float)
    coord_source = Column(Text, nullable=False)
    
    # Geocoded location
    city = Column(Text)
    state = Column(Text)
    country = Column(Text)
    formatted_address = Column(Text)
    timezone = Column(Text)
    
    # Time context (models infer patterns from these)
    local_iso = Column(DateTime(timezone=False))
    dow = Column(Integer)  # 0=Sunday, 1=Monday, etc.
    hour = Column(Integer)
    day_part_key = Column(Text)
    
    # Geospatial indexing
    h3_r8 = Column(Text)
    
    # Environmental context (JSON)
    weather = Column(JSON)
    air = Column(JSON)
    airport_context = Column(JSON)
    device = Column(JSON)
    permissions = Column(JSON)
    extras = Column(JSON)
    
    # Strategy tracking
    last_strategy_day_part = Column(Text, default=None)
    trigger_reason = Column(Text, default=None)


class Strategy(Base):
    """AI-generated strategies linked to snapshots"""
    __tablename__ = "strategies"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    snapshot_id = Column(UUID(as_uuid=True), ForeignKey('snapshots.snapshot_id', ondelete='CASCADE'), nullable=False, unique=True)
    correlation_id = Column(UUID(as_uuid=True))
    strategy = Column(Text)
    status = Column(Text, nullable=False, default="pending")  # pending|ok|failed
    error_code = Column(Integer)
    error_message = Column(Text)
    attempt = Column(Integer, nullable=False, default=1)
    latency_ms = Column(Integer)
    tokens = Column(Integer)
    next_retry_at = Column(DateTime(timezone=True))
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now(), onupdate=func.now())


class Ranking(Base):
    """Venue rankings generated by ML models"""
    __tablename__ = "rankings"
    
    ranking_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    snapshot_id = Column(UUID(as_uuid=True), ForeignKey('snapshots.snapshot_id'))
    correlation_id = Column(UUID(as_uuid=True))
    user_id = Column(UUID(as_uuid=True))
    city = Column(Text)
    ui = Column(JSON)
    model_name = Column(Text, nullable=False)


class RankingCandidate(Base):
    """Individual venue candidates within a ranking"""
    __tablename__ = "ranking_candidates"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    ranking_id = Column(UUID(as_uuid=True), ForeignKey('rankings.ranking_id', ondelete='CASCADE'), nullable=False)
    block_id = Column(Text, nullable=False)
    name = Column(Text, nullable=False)
    
    # Location
    lat = Column(Float, nullable=False)
    lng = Column(Float, nullable=False)
    h3_r8 = Column(Text)
    place_id = Column(Text)
    
    # Distance metrics
    drive_time_min = Column(Integer)
    straight_line_km = Column(Float)
    distance_miles = Column(Float)
    drive_minutes = Column(Integer)
    estimated_distance_miles = Column(Float)
    drive_time_minutes = Column(Integer)
    distance_source = Column(Text)
    
    # ML scoring
    est_earnings_per_ride = Column(Float)
    model_score = Column(Float)
    rank = Column(Integer, nullable=False)
    
    # Exploration/exploitation
    exploration_policy = Column(Text, nullable=False)
    epsilon = Column(Float)
    was_forced = Column(Boolean)
    propensity = Column(Float)
    
    # Value per minute calculations
    value_per_min = Column(Float)
    value_grade = Column(Text)
    not_worth = Column(Boolean)
    rate_per_min_used = Column(Float)
    trip_minutes_used = Column(Integer)
    wait_minutes_used = Column(Integer)
    
    # Features and metadata
    features = Column(JSON)
    snapshot_id = Column(UUID(as_uuid=True))


class Action(Base):
    """User actions on rankings (clicks, selections, etc.)"""
    __tablename__ = "actions"
    
    action_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    ranking_id = Column(UUID(as_uuid=True), ForeignKey('rankings.ranking_id', ondelete='CASCADE'))
    snapshot_id = Column(UUID(as_uuid=True), ForeignKey('snapshots.snapshot_id', ondelete='CASCADE'), nullable=False)
    user_id = Column(UUID(as_uuid=True))
    action = Column(Text, nullable=False)
    block_id = Column(Text)
    dwell_ms = Column(Integer)
    from_rank = Column(Integer)
    raw = Column(JSON)


class VenueCatalog(Base):
    """Curated venue catalog for recommendations"""
    __tablename__ = "venue_catalog"
    
    venue_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    place_id = Column(Text, unique=True)
    name = Column(Text, nullable=False)
    address = Column(Text, nullable=False)
    lat = Column(Float)
    lng = Column(Float)
    category = Column(Text, nullable=False)
    dayparts = Column(ARRAY(Text))
    staging_notes = Column(JSON)
    city = Column(Text)
    metro = Column(Text)
    ai_estimated_hours = Column(Text)
    business_hours = Column(JSON)
    discovery_source = Column(Text, nullable=False, default='seed')
    validated_at = Column(DateTime(timezone=True))
    suggestion_metadata = Column(JSON)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())


class VenueMetrics(Base):
    """Performance metrics for venues"""
    __tablename__ = "venue_metrics"
    
    venue_id = Column(UUID(as_uuid=True), ForeignKey('venue_catalog.venue_id'), primary_key=True)
    times_recommended = Column(Integer, nullable=False, default=0)
    times_chosen = Column(Integer, nullable=False, default=0)
    positive_feedback = Column(Integer, nullable=False, default=0)
    negative_feedback = Column(Integer, nullable=False, default=0)
    reliability_score = Column(Float, nullable=False, default=0.5)
    last_verified_by_driver = Column(DateTime(timezone=True))


class TriadJob(Base):
    """Triad ML pipeline job tracking"""
    __tablename__ = "triad_jobs"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    snapshot_id = Column(UUID(as_uuid=True), ForeignKey('snapshots.snapshot_id', ondelete='CASCADE'), nullable=False)
    kind = Column(Text, nullable=False, default='triad')
    status = Column(Text, nullable=False, default='queued')  # queued|running|ok|error
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    
    __table_args__ = (
        UniqueConstraint('snapshot_id', 'kind', name='unique_snapshot_kind'),
    )


class HttpIdempotency(Base):
    """HTTP idempotency key storage"""
    __tablename__ = "http_idem"
    
    key = Column(Text, primary_key=True)
    status = Column(Integer, nullable=False)
    body = Column(JSON, nullable=False)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())


class PlacesCache(Base):
    """Cache for Google Places API business hours"""
    __tablename__ = "places_cache"
    
    place_id = Column(Text, primary_key=True)
    formatted_hours = Column(JSON)
    cached_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    access_count = Column(Integer, nullable=False, default=0)


class VenueFeedback(Base):
    """Per-venue thumbs up/down feedback"""
    __tablename__ = "venue_feedback"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id = Column(UUID(as_uuid=True))
    snapshot_id = Column(UUID(as_uuid=True), ForeignKey('snapshots.snapshot_id', ondelete='CASCADE'), nullable=False)
    ranking_id = Column(UUID(as_uuid=True), ForeignKey('rankings.ranking_id', ondelete='CASCADE'), nullable=False)
    place_id = Column(Text)
    venue_name = Column(Text, nullable=False)
    sentiment = Column(Text, nullable=False)  # 'up' or 'down'
    comment = Column(Text)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    
    __table_args__ = (
        UniqueConstraint('user_id', 'ranking_id', 'place_id', name='unique_user_rank_place'),
        Index('ix_feedback_ranking', 'ranking_id'),
        Index('ix_feedback_place', 'place_id'),
    )


class StrategyFeedback(Base):
    """Strategy-level feedback"""
    __tablename__ = "strategy_feedback"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id = Column(UUID(as_uuid=True))
    snapshot_id = Column(UUID(as_uuid=True), ForeignKey('snapshots.snapshot_id', ondelete='CASCADE'), nullable=False)
    ranking_id = Column(UUID(as_uuid=True), ForeignKey('rankings.ranking_id', ondelete='CASCADE'), nullable=False)
    sentiment = Column(Text, nullable=False)  # 'up' or 'down'
    comment = Column(Text)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    
    __table_args__ = (
        UniqueConstraint('user_id', 'ranking_id', name='unique_user_rank'),
    )


class AppFeedback(Base):
    """General app feedback"""
    __tablename__ = "app_feedback"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    snapshot_id = Column(UUID(as_uuid=True), ForeignKey('snapshots.snapshot_id', ondelete='CASCADE'))
    sentiment = Column(Text, nullable=False)  # 'up' or 'down'
    comment = Column(Text)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())


class TravelDisruption(Base):
    """Airport travel disruptions (FAA data)"""
    __tablename__ = "travel_disruptions"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    country_code = Column(Text, nullable=False, default='US')
    airport_code = Column(Text, nullable=False)
    airport_name = Column(Text)
    
    delay_minutes = Column(Integer, default=0)
    ground_stops = Column(JSON, default=[])
    ground_delay_programs = Column(JSON, default=[])
    closure_status = Column(Text, default='open')
    delay_reason = Column(Text)
    
    ai_summary = Column(Text)
    impact_level = Column(Text, default='none')
    
    data_source = Column(Text, nullable=False, default='FAA')
    last_updated = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    next_update_at = Column(DateTime(timezone=True))


class LLMVenueSuggestion(Base):
    """LLM-generated venue suggestions for catalog expansion"""
    __tablename__ = "llm_venue_suggestions"
    
    suggestion_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    suggested_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    model_name = Column(Text, nullable=False)
    ranking_id = Column(UUID(as_uuid=True), ForeignKey('rankings.ranking_id'))
    venue_name = Column(Text, nullable=False)
    suggested_category = Column(Text)
    llm_reasoning = Column(Text)
    validation_status = Column(Text, nullable=False, default='pending')
    place_id_found = Column(Text)
    venue_id_created = Column(UUID(as_uuid=True), ForeignKey('venue_catalog.venue_id'))
    validated_at = Column(DateTime(timezone=True))
    rejection_reason = Column(Text)
